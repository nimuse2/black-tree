{"version":3,"sources":["components/page1.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["page1","props","state","value","filtered","currentFlag","currentName","handleChange","bind","handleClick","this","setState","data","Country","nextProps","e","target","newList","filter","item","lc","name","toLowerCase","includes","flag","Container","Jumbotron","class","id","type","onChange","placeholder","width","src","map","country","index","key","className","Button","onClick","svgFile","Component","Home","App","makeRemoteRequest","fetch","method","headers","body","JSON","stringify","query","then","res","json","error","loading","catch","basename","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0d2ef464.chunk.js","sourcesContent":["/*page1*/\nimport React, { Component, Fragment } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport '../css/utility.css';\n\nexport default class page1 extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            value: '',\n            filtered: [],\n            currentFlag: 'https://restcountries.eu/data/bra.svg',\n            currentName: 'Brazil',\n          };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        \n    }\n\n    componentDidMount() {\n        this.setState({\n            filtered: this.props.data.Country\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n          filtered: nextProps.data.Country\n        });\n      }\n\n    handleChange(e){\n        this.setState({value: e.target.value});\n        let currentList = [];\n        let newList = [];\n        if (e.target.value !== \"\") {\n            currentList = this.props.data.Country;\n            newList = currentList.filter(item => {\n                    const lc = item.name.toLowerCase();\n                    const filter = e.target.value.toLowerCase();\n                    return lc.includes(filter);\n                });\n        } else {\n            newList = this.props.data.Country;\n        }\n        \n        this.setState({\n            filtered: newList,\n        });\n    }\n    handleClick(flag, name){\n        this.setState({\n            currentFlag: flag,\n            currentName: name,\n            value: name,\n        });\n    }\n\n    render(){\n        \n        return (\n                <Container>\n                    <Jumbotron>\n                        <div\n                            class='row'\n                        >\n                            <div\n                                class=\"col-sm\"\n                            >\n                                <h1 class=\"display-4\">\n                                    {this.state.currentName}\n                                </h1>\n                                <p class=\"lead\">\n                                    Please use the search filter to find the country, then click 'Find' to find the flag..\n                                </p>\n                            </div>\n                        </div>\n                        <div\n                            class='row'\n                        >\n                            <div\n                                class='col-sm'\n                            >\n                                <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <span class=\"input-group-text\" id=\"basic-addon1\">üîç</span>\n                                </div>\n                                <input \n                                    type=\"text\" \n                                    value={this.state.value}\n                                    onChange={this.handleChange}\n                                    placeholder=\"Search..\"\n                                    class=\"form-control\"\n                                />\n                                </div>\n                            </div>\n                            <div\n                                class='col-sm flagBox'\n                            >\n                                \n                                <img \n                                    width=\"300\"\n                                    src={this.state.currentFlag} \n                                    class=\"rounded\"\n                                />\n                            </div>\n                        </div>\n                        <div>\n                            <ul class=\"list-group\">\n                            {this.state.filtered &&\n                                this.state.filtered.map((country,index) => \n                                    <li \n                                        key={index}\n                                        class=\"list-group-item d-flex justify-content-between\"\n                                        \n                                    >\n                                        <div\n                                            className={country.name == this.state.currentName ? 'selected': null}\n                                        >\n                                            {country.name}\n                                        </div>\n                                        <Button\n                                            type=\"button\"\n                                            class=\"btn-sm\" \n                                            onClick={() => this.handleClick(country.flag.svgFile, country.name)}>\n                                                Find\n                                        </Button>\n                                    </li>\n                                )\n                            }\n                            </ul>\n                        </div>\n                    </Jumbotron>\n                </Container>\n        )\n    }\n}","\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default class Home extends Component {\n\n    render(){\n        \n        return (\n                <Container>\n                    <Jumbotron>\n                    <h1 class=\"display-4\">FindaFlag</h1>\n                    <p class=\"lead\">by Nick Walters for Black Tree Gaming</p>\n                    <hr class=\"my-4\"></hr>\n                    <p class=\"follow\">&copy; August 2020</p>\n                    </Jumbotron>\n                </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Page1 from './components/page1';\nimport Home from './components/Home';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      data: {},\n      error: null,\n    };\n\n  }\n\n  componentDidMount() {\n    this.makeRemoteRequest();\n  }\n  \n  makeRemoteRequest = () => {\n    fetch('https://countries-274616.ew.r.appspot.com/', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n     body: JSON.stringify({ query: 'query { Country { name flag { svgFile }} }'}),\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.setState({\n        data: res.data,\n        error: res.error || null,\n        loading: false,\n      });\n    })\n    .catch(error => {\n      this.setState({ error, loading: false });\n    });\n\n  };\n  \n  render(){\n\n    return (\n      \n      <BrowserRouter basename=\"/\">\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n          <div class=\"d-flex\">\n            <div class=\"p-2\">\n              <a class=\"navbar-brand\">FindaFlag.com</a>\n            </div>\n            <div class=\"p-2\">\n              <Link \n                to=\"/\"\n                class=\"nav-link\"\n              >\n                Home\n              </Link>\n            </div>\n            <div class=\"p-2\">\n              <Link \n                to=\"/page1\"\n                class=\"nav-link\"\n                >\n                  Flag Finder\n                </Link>\n            </div>\n          </div>\n        </nav>\n      <div>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/page1\">\n            <Page1 \n              data={this.state.data}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n    );\n  }\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}